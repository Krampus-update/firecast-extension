{
	"nova ficha": {
		"prefix": "Novo Modelo de Ficha",
		"body": [
			"<?xml version='1.0' encoding='UTF-8'?>",
			"<form formType='sheetTemplate' dataType='$1' title='$2' name='$3'>",
			"\n$4",
			"</form>"
		],
		"description": "Cada modelo de ficha do SDK3 é um documento Lua Form (extensão '.lfm') e toda vez que o usuário abre um personagem, o RRPG Firecast localiza o Lua Form adequado, cria uma nova instância e a exibe na tela."
	},
	"button": {
		"prefix": "button",
		"body": [
			"<button align='$1' text='$2' />"
		],
		"description": "A tag/componente button representa um botão na interface."
	},
	"activityIndicator": {
		"prefix": "activityIndicator",
		"body": [
			"<activityIndicator align='$1' enabled='true'/>"
		],
		"description": "A tag/componente activityIndicator representa um controle que exibe uma animação na interface com o intuito de indicar ao usuário que alguma atividade está sendo feita, como um carregamento ou uma outra espera qualquer!"
	},
	"comboBox": {
		"prefix": "comboBox",
		"body": [
			"<comboBox align='$1' items='{$2}'/>"
		],
		"description": "A tag/componente comboBox representa uma caixa de seleção que permite o usuário selecionar um item entre vários."
	},
	"colorComboBox": {
		"prefix": "colorComboBox",
		"body": [
			"<colorComboBox align='$1' top='$2'/>"
		],
		"description": "A tag/componente colorComboBox representa uma caixa de seleção que permite o usuário selecionar uma cor qualquer."
	},
	"checkBox": {
		"prefix": "checkBox",
		"body": [
			"<checkBox align='$1' text='$2'/>"
		],
		"description": "A tag/componente checkBox representa uma caixa de marcação na interface."
	},
	"dataLink": {
		"prefix": "dataLink",
		"body": [
			"<dataLink field='$1'>\n",
			"$2",
			"</dataLink>"
		],
		"description": "A tag dataLink representa um componente não visual (não é exibido na interface) que monitora mudanças em um NodeDatabase."
	},
	"dataScopeBox": {
		"prefix": "dataScopeBox",
		"body": [
			"<dataScopeBox $1/>\n",
			"</dataScopeBox"
		],
		"description": "A tag/componente dataScopeBox funciona como a tag layout, porém permite definir em qual objeto Nodo seus controles salvarão/lerão os dados (NodeDatabase);\nApós definir o nodo escopo, todos os componentes visuais que estão dentro desta tag passarão a ler e salvar os dados neste nodo.\nSaiba mais sobre escopo de dados do NodeDatabase em Lua Form e NodeDatabase.\nAtenção: A tag popup não é capturada pelo escopo de dados definido pelo dataScopeBox."
	},
	"edit": {
		"prefix": "edit",
		"body": [
			"<edit align='$1' top='$2'/>"
		],
		"description": "A tag/componente edit representa uma caixa de texto na interface. Um ótimo controle para permitir a entrada de dados!"
	},
	"event": {
		"prefix": "event",
		"body": [
			"<event name='$1'><![CDATA[\n",
			"$2",
			"]]></event>"
		],
		"description": "Esta tag especial serve para tratar um evento de uma tag/controle usando a linguagem de programação LUA (veja A linguagem de programação LUA).\n\tObservações:\nO corpo da tag contém código de programação LUA.\nEsta tag não cria nenhum controle.\nVocê deve colocar a tag event dentro da tag que deseja tratar o evento.\nImportante: Não deixe de ler as Orientações ao usar código LUA em um Lua Form."
	},
	"flowLayout": {
		"prefix": "flowLayout",
		"body": [
			"<flowLayout align='$1' autoHeight='true' orientation='horizontal'>\n",
			"</flowLayout>"
		],
		"description": "A tag/componente flowLayout organiza controles na interface de forma dinâmica. Excelente para criar interfaces que se adaptam a diferentes tamanhos de tela.\nOs componentes que estão dentro de um flowLayout são automaticamente posicionados de forma sequencial e arranjados em linhas quando não houver espaço na horizontal.\nObservação: Não é possível usar a propriedade 'align' nos controles filhos desta tag."
	},
	"flowLineBreak": {
		"prefix": "flowLineBreak",
		"body": [
			"<flowLineBreak/>\n\t$1",
			"<flowLineBreak/>"
		],
		"description": "A tag/componente flowLineBreak é um componente invisível e serve apenas para quebrar linha em um layout dinâmico (Ver Tag flowLayout).\nObservações:\nDeve ser usado junto com a Tag flowLayout.\nSe a orientação do flowLayout for 'vertical', esta tag cria uma nova coluna no layout."
	},
	"flowPart": {
		"prefix": "flowPart",
		"body": [
			"<flowPart minmaxheight='$1'>\n",
			"</flowPart>"
		],
		"description": "A tag/componente flowPart representa uma parte dinâmica de um layout dinâmico (Ver Tag flowLayout). É um controle similar à uma tag layout, mas com a possibilidade de definir uma largura dinâmica, isto é, um layout que muda sua largura de acordo com a necessidade.\nObservação: Deve ser usado junto com a Tag flowLayout."
	},
	"group": {
		"prefix": "group",
		"body": [
			"<group>\n\t$1",
			"</group>"
		],
		"description": "Com a  tag group, o programador pode agrupar outras tags. Esta tag não faz nada além disso, não afeta a interface visual e nem a interpretação do Lua Form.\nNão há propriedades e nem atributos.\nÉ especialmente útil para usar com a tag import. Honestamente, sua única utilidade é essa hehehe =)."
	},
	"horzLine": {
		"prefix": "horzLine",
		"body": [
			"<horzLine align='$1' strokeColor='$2'/>"
		],
		"description": "A tag/componente horzLine representa uma linha na horizontal com cores e espessura personalizada."
	},
	"form": {
		"prefix": "form",
		"body": [
			"<form formType='sheetTemplate' dataType='$1'",
			"\ttitle='$2' name='$3'>",
			"\n",
			"</form>"
		],
		"description": "A tag/componente form representa uma ficha, um formulário ou uma janela do plug-in.\nAs principais características do form são:\n\t• Para que alguma interface visual seja apresentada na tela do usuário, é necessário existir ao menos 1 form. Sem form, não há apresentação da interface.\n\t• Apenas os componentes que estão dentro de um form são apresentados na tela.\n\t• É possível existir um form dentro de outro form.\n\t• É possível definir um tema para um form e todos os componentes que estão dentro dele. Exemplo: Você quer que o form (e demais componentes) tenha aparência escura ou clara?\n\t• É possível associar um Nodo de um NodeDatabase (Ver NodeDatabase) a um form. Quando você faz isso, todos os componentes de edição (que estão dentro do form) passam a salvar os dados neste nodo.\n\t• Os modelos de ficha fazem isso! Mas você não precisa se preocupar com isso, pois o SDK 3 faz isso automaticamente para você ;)."
	},
	"image": {
		"prefix": "image",
		"body": [
			"<image align='$1' src='$2' height='$3'/>"
		],
		"description": "A tag/componente image representa uma imagem na interface visual."
	},
	"imageCheckBox": {
		"prefix": "imageCheckBox",
		"body": [
			"<imageCheckBox align='$1' checkedImage='$2' uncheckedImage='$3'/>"
		],
		"description": "A tag/componente imageCheckBox representa uma caixa de marcação na interface no qual é possível personalizar a imagem apresentada quando a caixa está marcada e quando está desmarcada."
	},
	"import": {
		"prefix": "import",
		"body": [
			"<import file='$1/>"
		],
		"description": "Com a  tag import, o programador pode importar/incluir um outro documento XML ao Lua Form, acarretando na substituição da tag pelo conteúdo do arquivo especificado.\nÉ especialmente útil para:\n\t• Organizar o documento Lua form. Exemplo: Quando o arquivo '.lfm' ficar grande, é interessante dividir ele em partes menores, cada parte em seu documento XML separado.\n\t• Reaproveitar código. Exemplo: Se você tiver templates ou styles que queira reaproveitar em outros Lua Forms, você pode criar um documento XML que contenha apenas o que queira reaproveitar e o importar nos Lua Forms."
	},
	"label": {
		"prefix": "label",
		"body": [
			"<label align='$1' text='$2'/>"
		],
		"description": "A tag/componente label representa um texto não editável na interface. Excelente para mostrar informações."
	},
	"layout": {
		"prefix": "layout",
		"body": [
			"<layout align='$1' height='$2'>"
		],
		"description": "A tag/componente layout representa um componente visual “invisível”. Ele não apresenta nada na tela e é usado apenas para organizar outros componentes visuais.\nAs principais características do layout são:\n\t• Não apresentam nada na tela, são transparentes.\n\t• São ótimos para organizar e/ou agrupar outros componentes visuais.\n\n\nExemplo: Você pode adicionar 10 outros componentes dentro de um layout e alterar a posição de todos, ao mesmo tempo, alterando a apenas posição do layout.\n\n• As tags/controles que estão dentro de layout mas visualmente fora de seus limites (largura e altura do layout) não são desenhadas na tela."
	},
	"path": {
		"prefix": "path",
		"body": [
			"<path align='client' margins='{$1}'",
			"\t\tcolor='orange' data='$2'/>"
		],
		"description": "A tag/componente path representa uma forma geométrica/shape totalmente personalizada e vetorial. Todas as formas geométricas básicas podem ser criadas usando esta tag."
	},
	"popup": {
		"prefix": "popup",
		"body": [
			"<popup name='$1' height='$2' backOpacity='0.5'>\n\t$3",
			"</popup>"
		],
		"description": "A tag/componente popup representa um componente visual que fica escondido na interface e é posteriormente apresentado, tomando a atenção para si, na forma de um popup."
	},
	"popupForm": {
		"prefix": "popupForm",
		"body": [
			"<popupForm $1>\n\t$2",
			"</popupForm>"
		],
		"description": "A tag/componente popupForm é uma especialização da tag form que contém propriedades próprias para exibir uma janela popup na interface do usuário.\nVocê pode usar esta tag como tag raiz de um arquivo LFM."
	},
	"progressBar": {
		"prefix": "progressBar",
		"body": [
			"<progressBar color='$1' align='$2' value='$3' max='$4'/>"
		],
		"description": "A tag/componente progressBar representa uma barra de progresso/estado, ótimo para dar noção ao usuário do progresso de algo em um formato visual."
	},
	"radioButton": {
		"prefix": "radioButton",
		"body": [
			"<radioButton text='$1' groupName='$2' field='$3' fieldValue='$4' align='$5'/>"
		],
		"description": "A tag/componente radioButton representa uma caixa de marcação na interface que, quando usada em grupo, permite apenas uma esteja marcada por vez."
	},
	"recordList": {
		"prefix": "recordList",
		"body": [
			"<recordList name='$1' field='$2' templateForm='$3'",
			"\t\talign='$4' autoHeight='true'/>"
		],
		"description": "A tag/componente recordList é uma lista de registros na interface. Usada em conjunto com um NodeDatabase, o controle apresenta um painel na interface para cada item/nodo filho de um campo.\nObservações:\n\t• O painel dos itens é customizado pelo programador.\n\t• O painel dos itens deve ser um form (ver Tag form) e é chamado de Template Form.\n\t• Você vai precisar de ao menos dois arquivos de extensão '.lfm': Um onde se encontra o recordList, e outro representando o painel item.\n\t• Cada item possui seu próprio objeto nodo, e cada painel de item é automaticamente ligado a seu escopo de dados."
	},
	"rectangle": {
		"prefix": "rectangle",
		"body": [
			"<rectangle align='$1'>\n",
			"$2\n",
			"</rectangle>"
		],
		"description": "A tag/componente rectangle representa um retângulo na interface o qual você pode personalizar cores, bordas e outros aspectos da forma."
	},
	"richEdit": {
		"prefix": "richEdit",
		"body": [
			"<richEdit align='client' backgroundColor='$1' defaultFontColor='$2' field='$3'/>"
		],
		"description": "A tag/componente richEdit representa uma caixa de texto de múltiplas linhas com possibilidade de adicionar formatação, cores, alinhamentos, imagens, etc... Um ótimo controle para permitir a entrada de dados 'texto ricos'."
	},
	"script": {
		"prefix": "script",
		"body": [
			"<script><![CDATA[\n",
			"\t$1",
			"]]></script>"
		],
		"description": "Esta tag especial serve para definir um bloco de códigos LUA (veja A linguagem de programação LUA) que será executado quando uma nova instância do Lua Form for criada.\nObservações:\n\t• O corpo da tag contém código de programação LUA.\n\t• Esta tag não cria nenhum controle.\n\t• A ordem que a tag script foi definida no documento Lua Form importa! O código será executado logo após a criação da tag/controle que está acima, porém antes da criação da tag/controle que está abaixo. No momento exato em que o script é executado, a variável 'sheet' conterá valor nil e será preenchido num momento posterior.\nImportante: Não deixe de ler as Orientações ao usar código LUA em um Lua Form."
	},
	"scrollBox": {
		"prefix": "scrollBox",
		"body": [
			"<scrollBox align='$1' height='$2'>\n\t$3",
			"</scrollBox>"
		],
		"description": "A tag/componente scrollBox é um controle que adiciona barras de rolagem ao seu conteúdo, permitindo realizar 'scroll' nos componentes que estão dentro da caixa.\nEm dispositivos que possuem touch screen, permite também o gesto de 'pinça' para efetuar zoom do conteúdo.\nObservação: As barras de rolagem aparecem apenas for necessário, isto é, as dimensões do conteúdo for maior que as dimensões da tag scrollBox"
	},
	"style": {
		"prefix": "style",
		"body": [
			"<style>\n",
			"\t$1",
			"</style>"
		],
		"description": "Esta tag especial serve para definir um estilo em cascata, muito semelhante ao CSS no HTML. Um estilo em cascata é um bloco de códigos especiais que aplica valores à propriedades de 1 ou mais controles de uma vez só, em cascata.\nÉ especialmente útil para evitar retrabalho e para separar o formato do conteúdo principal do Lua Form.\nImportante: A sintaxe do estilo em cascata é muito semelhante ao do CSS, porém as propriedades disponíveis são diferentes."
	},
	"tab": {
		"prefix": "tab",
		"body": [
			"<tab title='$1'>\n\t$2",
			"</tab>"
		],
		"description": "A tag/componente tab representa uma aba dentro de um grupo de abas (Ver Tag tabControl). Excelente para dividir controles em duas ou mais abas.\nIMPORTANTE: Para usar abas, você deve usar uma Tag tabControl."
	},
	"tabControl": {
		"prefix": "tabControl",
		"body": [
			"<tabControl align='client'>\n\t$1",
			"</tabControl>"
		],
		"description": "A tag/componente tabControl representa um controle que agrupa tabs/abas. Excelente para dividir controles em duas ou mais abas."
	},
	"template": {
		"prefix": "template",
		"body": [
			"<template name='$1'>\n\t$2",
			"</template>"
		],
		"description": "Com esta tag, o programador pode criar seu próprio conjunto de tags do Lua Form que sempre que forem usada, serão substituídas pelo conteúdo do template.\nObservação: Esta tag não representa um componente do lua form e todas as tags que estão dentro do template só existirão de fato quando o modelo for invocado."
	},
	"textEditor": {
		"prefix": "textEditor",
		"body": [
			"<textEditor align='$1' height='$2' text='$3'/>"
		],
		"description": "A tag/componente textEditor representa uma caixa de texto de múltiplas linhas. Um ótimo controle para permitir a entrada de dados texto com quebra de linhas."
	},
	"timer": {
		"prefix": "timer",
		"body": [
			"<timer interval='$1' onTimer='$2'/>"
		],
		"description": "A tag timer representa um componente não visual (não é exibido na interface) que executa determinado código LUA de tempo em tempo."
	}
}
